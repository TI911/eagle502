/**
 * @file snake_robot_master_vrep.h
 * @brief V-REP上のヘビ型ロボットを管理するためのクラス
 * @author Tatsuya TAKEMORI
 * @date 2017/01/24
 * @detail
 *  物理シミュレータV-REP上のロボットを操作する．
 *  V-REPのremoteAPIを使用し，snake_robot_master.hとの共通部分を
 *  できるだけ再利用してシステムを構築する．
 *  V-REPのROS連携機能を使うよりも，remoteAPIを使う方が単純な気がする．
 */

#ifndef SNAKE_ROBOT_MASTER_VREP_SRC_SNAKE_ROBOT_MASTER_VREP_H_
#define SNAKE_ROBOT_MASTER_VREP_SRC_SNAKE_ROBOT_MASTER_VREP_H_

#include <ros/ros.h>
#include <vector>
#include "vrep.h"
#include "configuration.h"


class RobotControlForVrep {
 public:
  static bool Initialize() {
    ros::NodeHandle node;
    ros::NodeHandle node_handle_private("~");
    node_handle_private.param("is_static", is_static_, false);

    //--- V-REP用 ---//
    if (not Vrep::Initialize()) { return false; }
    if (not GetHandle()) { return false; }
    for (uint8_t i=0; i<10; i++) {
      //SetJointMaxTorque(MAX_JOINT_TORQUE);
      //RequestJointSetPIDGain(0, true, P_GAIN, I_GAIN, D_GAIN);
      //SetJointPresentAngleTarget();
      Vrep::WaitForReachingLastCommand();
    }
    if(not is_static_) {
      Vrep::StartSimulation();
    }

  }
  
  static void SetJointMaxTorque(double torque);

 private:
  //--- V-REP用 ---//
  static bool GetHandle();


  //--- V-REP用 ---//
  static std::vector<Vrep::JointObject> joint_;
  static std::vector<Vrep::Object> link_;
  static std::vector<Vrep::ForceSensor> force_sensor_;
  static std::vector<Vrep::ProximitySensor> proximity_sensor_;

  static void SetJointPresentAngleTarget();


  static bool is_static_;  // シミュレーションを静的に行うとき，true
};

#endif /* SNAKE_ROBOT_MASTER_VREP_SRC_SNAKE_ROBOT_MASTER_VREP_H_ */

