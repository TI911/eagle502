/**
 * @file snake_robot_master_vrep.h
 * @brief V-REP上のヘビ型ロボットを管理するためのクラス
 * @author Tatsuya TAKEMORI
 * @date 2017/01/24
 * @detail
 *  物理シミュレータV-REP上のロボットを操作する．
 *  V-REPのremoteAPIを使用し，snake_robot_master.hとの共通部分を
 *  できるだけ再利用してシステムを構築する．
 *  V-REPのROS連携機能を使うよりも，remoteAPIを使う方が単純な気がする．
 */

#include <string>
#include "robot_control_for_vrep.h"

//=== staticメンバの実体 ============================================================//
//--- V-REP用 ---//
std::vector<Vrep::JointObject> RobotControlForVrep::joint_;
std::vector<Vrep::Object> RobotControlForVrep::link_;
std::vector<Vrep::ForceSensor> RobotControlForVrep::force_sensor_;
std::vector<Vrep::ProximitySensor> RobotControlForVrep::proximity_sensor_;


bool RobotControlForVrep::is_static_;

//=== メンバ関数の定義 ==============================================================//
//--- V-REP用 ---//
/** @fn
 * @brief ヘビ型ロボットに必要なhandleを取得する
 * @param なし
 * @return bool false:どこかで失敗
 * @detail
 */
bool RobotControlForVrep::GetHandle() {
  link_.resize(NUM_JOINT+1);
  joint_.resize(NUM_JOINT);
  force_sensor_.resize(NUM_JOINT+1);
  proximity_sensor_.resize(NUM_JOINT+1);

  bool is_some_error_in_getting_handles = false;
  // linkのhandleを取得，保存
  for (uint8_t i_link=0; i_link<NUM_JOINT+1; i_link++) {
    std::string obj_name = LINK_OBJ_NAME + std::to_string(i_link+1);
    if ( not link_[i_link].GetHandle( obj_name ) ) {
      is_some_error_in_getting_handles = true;
    }
  }

  // jointのhandleを取得
  for (uint8_t i_joint=0; i_joint<NUM_JOINT; i_joint++) {
    std::string obj_name = JOINT_OBJ_NAME + std::to_string(i_joint+1);
    if( not joint_[i_joint].GetHandle( obj_name ) ) {
      is_some_error_in_getting_handles = true;
    }
  }

#ifdef USE_COP_SENSOR
  // force_sensorのhandleを取得
  for (uint8_t i_link=0; i_link<NUM_JOINT+1; i_link++) {
    std::string obj_name = FORCE_SENSOR_OBJ_NAME + std::to_string(i_link+1);
    if( not force_sensor_[i_link].GetHandle( obj_name ) ) {
      is_some_error_in_getting_handles = true;
    }
  }

  // proximity_sensorのhandleを取得
  for (uint8_t i_link=0; i_link<NUM_JOINT+1; i_link++) {
    std::string obj_name = PROXIMITY_SENSOR_OBJ_NAME + std::to_string(i_link+1);
    if( not proximity_sensor_[i_link].GetHandle( obj_name ) ) {
      is_some_error_in_getting_handles = true;
    }
  }
#endif

  // エラーの有無を確認
  if (is_some_error_in_getting_handles){ return false; }
  return true;
}





